//
//  ZXGoodsSpecViewController.swift
//  rbstore
//
//  Created by screson on 2017/7/24.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

enum ZXSpecSelectType {
    case none
    case buyNow
    case addToCart
    case changeSpec
    case invalid
    case offShelves
    case soldOut
}

class ZXGoodsSpecViewController: ZXUIViewController {

    fileprivate var selectedItemIds = [String:String]()
    var goodsDetailModel: ZXGoodsDetailModel?
    
    @IBOutlet weak var imgvIcon: ZXUIImageView!
    
    @IBOutlet weak var lbPrice: ZXUILabel!
    @IBOutlet weak var lbStock: ZXUILabel!
    @IBOutlet weak var lbSelectedSpecs: ZXUILabel!
    @IBOutlet weak var btnBuyNow: UIButton!
    
    @IBOutlet weak var btnCommit: ZXRButton!
    @IBOutlet weak var btnAddToCart: ZXRButton!
    @IBOutlet weak var ccvSepcList: UICollectionView!
    
    @IBOutlet weak var lbOutOffSale: ZXUILabel!
    
    var type:ZXSpecSelectType = ZXSpecSelectType.none
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.modalPresentationStyle = .custom
        self.transitioningDelegate = self
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        self.view.backgroundColor = UIColor.clear
        self.lbPrice.textColor = UIColor.zx_customAColor
        self.lbSelectedSpecs.textColor = UIColor.zx_textColorMark
        self.lbStock.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        self.lbSelectedSpecs.font = UIFont.zx_bodyFont(UIFont.zx_bodyFontSize - 2)
        
        btnBuyNow.titleLabel?.font = UIFont.zx_titleFont
        btnBuyNow.setTitleColor(UIColor.zx_textColorTitle, for: .normal)
        
        let flowLayout = ZXMaxSpacingCCVLayout.init()
        flowLayout.minimumLineSpacing = 10
        flowLayout.minimumInteritemSpacing = 10
        self.ccvSepcList.collectionViewLayout = flowLayout
        self.ccvSepcList.allowsMultipleSelection = true
        self.ccvSepcList.register(UINib(nibName: ZXSpecCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXSpecCell.reuseIdentifier)
        self.ccvSepcList.register(ZXSpecHeaderCollectionReusableView.self, forSupplementaryViewOfKind: UICollectionElementKindSectionHeader, withReuseIdentifier: ZXSpecHeaderCollectionReusableView.reuseIdentifier)
        self.ccvSepcList.register(UINib(nibName: ZXBuyCountCCVCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXBuyCountCCVCell.reuseIdentifier)
        self.ccvSepcList.alwaysBounceVertical = true
        
        self.reloadType(self.type)
        
        self.lbPrice.text = ""
        self.lbStock.text = "库存:"
        self.lbSelectedSpecs.text = "请选择规格"
        
        if let model = self.goodsDetailModel,let defaultSpec = model.product?.zx_defaultSpec {
            //检索所有选中的默认规格
            var indexPaths = [IndexPath]()
            for itemIds in defaultSpec.zx_ids {
                if let indexPath = model.zx_specItemIndexpath(itemIds) {
                    indexPaths.append(indexPath)
                }
            }
            if indexPaths.count == model.zx_allSpecKeys.count {//说明该规格还存在
                self.lbPrice.text = "\(defaultSpec.salePrice)".zx_priceString()
                self.lbStock.text = "库存:\(defaultSpec.stock)"
                self.lbSelectedSpecs.text = "已选择:\(defaultSpec.zx_descriptionIn(model.zx_allSpecItem))"
                for (index,indexPath) in indexPaths.enumerated() {
                    self.ccvSepcList.selectItem(at: indexPath, animated: true, scrollPosition: .top)
                    if let key = model.zx_SpecKeyAtSection(indexPath.section) {
                        self.selectedItemIds[key] = defaultSpec.zx_ids[index] //对应的规格值
                    }
                }
            }
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if let model = self.goodsDetailModel {
            self.imgvIcon.kf.setImage(with: URL(string:(model.product?.mainUrlStr) ?? ""), placeholder: UIImage.Default.goods, options: nil, progressBlock: nil, completionHandler: nil)
        } else {
            ZXHUD.showFailure(in: self.view, text: "无商品信息", delay: ZXConst.zxdelayTime)
        }
    }
    
    func reloadType(_ type:ZXSpecSelectType) {
        self.btnBuyNow.isHidden = true
        self.btnAddToCart.isHidden = true
        self.btnCommit.isHidden = true
        self.lbOutOffSale.isHidden = true
        self.type = type
        switch type {
            case .none:
                self.btnBuyNow.isHidden = false
                self.btnAddToCart.isHidden = false
            case .buyNow,.addToCart,.changeSpec:
                self.btnCommit.isHidden = false
            case .offShelves:
                self.lbOutOffSale.isHidden = false
                self.lbOutOffSale.text = "商品已下架"
            case .soldOut:
                self.lbOutOffSale.isHidden = false
                self.lbOutOffSale.text = "无货"
            case .invalid:
                self.lbOutOffSale.isHidden = false
                self.lbOutOffSale.text = "商品已失效"
        }
    }
    
    //确定
    @IBAction func commitAction(_ sender: UIButton) {
        
    }
    //立即购买
    @IBAction func buyNow(_ sender: Any) {
        
    }
    //加入购物车
    @IBAction func addToCart(_ sender: Any) {
        
    }
    
    @IBAction func tapAction(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    
    func selectSpec(at indexPath:IndexPath) {
        self.deselectCCVList(at: indexPath.section,except: indexPath.row)
        if let model = self.goodsDetailModel {
            if let key = model.zx_SpecKeyAtSection(indexPath.section) {
                let item = model.specList[indexPath.section].specOptionList[indexPath.row]
                if let lastId = self.selectedItemIds[key],lastId == item.id {
                    self.selectedItemIds.removeValue(forKey: key)
                    item.zx_isSelected = false
                    self.ccvSepcList.deselectItem(at: indexPath, animated: true)
                } else {
                    self.selectedItemIds[key] = item.id
                    item.zx_isSelected = true
                }
            }
        }
        if let str = self.selectedSpecStr { //全部选中完成
            self.lbSelectedSpecs.text = "已选择:\(str)"
        } else {
            self.lbSelectedSpecs.text = "请选择规格"
        }
        
        //规格项全部选中
        if let model = self.goodsDetailModel,self.selectedItemIds.count == model.zx_allSpecKeys.count {
            var ids = [String]()
            for sid in self.selectedItemIds.values {
                ids.append(sid)
            }
            ids.sort{ $0 < $1 }
            if let validItem = self.goodsDetailModel?.zx_specCombo(by: ids.joined(separator: ",")) {
                self.goodsDetailModel?.zx_selectedSpecCombo = validItem
                self.lbPrice.text = "\(validItem.salePrice)".zx_priceString()
                self.lbStock.text = "库存:\(validItem.stock)"
                //检测底部控制按钮
                self.changeBottomControlStatus(validItem.zx_selectType)
            } else {
                self.changeBottomControlStatus(.notExist)

            }
            
        }
        
        //检测某些规格是否可以点击
        //self.checkCCVListItemCanSelected(afterCheck: indexPath)
    }
    
    fileprivate func changeBottomControlStatus(_ type:ZXSpecItemType) {
        switch  type{
        case .valid:
//            if self.type == .
            self.btnBuyNow.isHidden = false
            self.btnAddToCart.isHidden = false
            self.lbOutOffSale.isHidden = true
        case .soldOut:
            self.btnBuyNow.isHidden = true
            self.btnAddToCart.isHidden = false
            self.lbOutOffSale.isHidden = false
            self.lbOutOffSale.text = "无货"
        case .notExist:
            self.btnBuyNow.isHidden = true
            self.btnAddToCart.isHidden = true
            self.lbOutOffSale.isHidden = false
            self.lbOutOffSale.text = "无效"
        }
    }
    
    /// 检测某些规格是否可以点击
    fileprivate func checkCCVListItemCanSelected(afterCheck indexPath:IndexPath) {
        if let model = self.goodsDetailModel {
            let itemList = model.zx_allSpecItem
            for item in itemList {//全部置为有效
                item.zx_selectType = .valid
            }
            var selectedIds = [String]()
            for sid in self.selectedItemIds.values {//所以已选择的规格 id
                selectedIds.append(sid)
            }
            let selectedKeyCount = self.selectedItemIds.count
            var canSelectedItem = Set<ZXSpecItem>()
            for selectId in self.selectedItemIds.values {
                for comboSpec in model.specProductList {
                    if comboSpec.zx_ids.contains(selectId) {
//                        canSelectedId.append(contentsOf: comboSpec.zx_ids)
                        for sId in comboSpec.zx_ids {
                            if let item = model.zx_specItem(from: sId){
                                canSelectedItem.insert(item)
                            }
                        }
                    }
                }
            }
            
            let keyCount = model.zx_allSpecKeys.count
            if selectedKeyCount == keyCount - 1 {
                for comboSpec in model.specProductList {//所有可选规格组合
                    let setA = Set.init(comboSpec.zx_ids)
                    let setB = Set.init(selectedIds)
                    if setA.intersection(setB) == setB {
                        for sId in comboSpec.zx_ids {
                            if let item = model.zx_specItem(from: sId){
                                if let existM = model.zx_specCombo(by: comboSpec.zx_sortedIdsStr) {
                                    item.zx_selectType = existM.zx_selectType
                                }
                                canSelectedItem.insert(item) //插入 已有就修改
                            } else {
                                for notExistId in selectedIds {
                                    if let item = model.zx_specItem(from: notExistId) {
                                        item.zx_selectType = ZXSpecItemType.notExist
                                        canSelectedItem.insert(item) //插入 已有就修改
                                    }
                                }
                            }
                        }
                    }
                }
            }
//            if keyCount == 1 {
//                for comboSpec in model.specProductList {//所有可选规格组合
//                    let setA = Set.init(comboSpec.zx_ids)
//                    let setB = Set.init(selectedIds)
//                    if setA.intersection(setB) == setB {
//                        for sId in comboSpec.zx_ids {
//                            if let item = model.zx_specItem(from: sId){
//                                if let existM = model.zx_specCombo(by: comboSpec.zx_sortedIdsStr) {
//                                    item.zx_selectType = existM.zx_selectType
//                                }
//                                canSelectedItem.insert(item) //插入 已有就修改
//                            } else {
//                                for notExistId in selectedIds {
//                                    if let item = model.zx_specItem(from: notExistId) {
//                                        item.zx_selectType = ZXSpecItemType.notExist
//                                        canSelectedItem.insert(item) //插入 已有就修改
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            } else if keyCount == 2 {
//                if selectedKeyCount == 1 { //只剩下最后一个规格，可以确定库存 或是否存在改规格
//                    for comboSpec in model.specProductList {//所有可选规格组合
//                        let setA = Set.init(comboSpec.zx_ids)
//                        let setB = Set.init(selectedIds)
//                        if setA.intersection(setB) == setB {
//                            for sId in comboSpec.zx_ids {
//                                if let item = model.zx_specItem(from: sId){
//                                    if let existM = model.zx_specCombo(by: comboSpec.zx_sortedIdsStr) {
//                                        item.zx_selectType = existM.zx_selectType
//                                    }
//                                    canSelectedItem.insert(item) //插入 已有就修改
//                                } else {
//                                    for notExistId in selectedIds {
//                                        if let item = model.zx_specItem(from: notExistId) {
//                                            item.zx_selectType = ZXSpecItemType.notExist
//                                            canSelectedItem.insert(item) //插入 已有就修改
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            } else if keyCount > 2 {
//                if selectedKeyCount == 1 {//只有一行 该行全部可选择
//                    for sItem in model.specList[indexPath.section].specOptionList {
//                        canSelectedItem.insert(sItem)
//                    }
//                } else if selectedKeyCount == keyCount - 1 { //只剩下最后一个规格时，可以确定库存 或是否存在改规格
//                    for comboSpec in model.specProductList {//所有可选规格组合
//                        let setA = Set.init(comboSpec.zx_ids)
//                        let setB = Set.init(selectedIds)
//                        if setA.intersection(setB) == setB {
//                            for sId in comboSpec.zx_ids {
//                                if let item = model.zx_specItem(from: sId){
//                                    if let existM = model.zx_specCombo(by: comboSpec.zx_sortedIdsStr) {
//                                        item.zx_selectType = existM.zx_selectType
//                                    }
//                                    canSelectedItem.insert(item) //插入 已有就修改
//                                } else {
//                                    for notExistId in selectedIds {
//                                        if let item = model.zx_specItem(from: notExistId) {
//                                            item.zx_selectType = ZXSpecItemType.notExist
//                                            canSelectedItem.insert(item) //插入 已有就修改
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
            //
            for item in itemList {
                if !canSelectedItem.contains(item) {
                    item.zx_selectType = ZXSpecItemType.soldOut
                    item.zx_isSelected = false
                    if let idx = model.zx_specItemIndexpath(item.id) {
                        if let key = model.zx_SpecKeyAtSection(idx.section) {
                            self.selectedItemIds.removeValue(forKey: key)
                        }
                    }
                }
            }
            self.ccvSepcList.reloadData()
        }
    }
    
    /// 已选中规格描述
    fileprivate var selectedSpecStr: String? {
        get {
            if self.selectedItemIds.count > 0 {
                var str = [String]()
                for sId in self.selectedItemIds.values {
                    if let item = self.goodsDetailModel?.zx_specItem(from: sId) {
                        str.append("\(item.value)")
                    }
                }
                return str.joined(separator: ";")
            }
            return nil
        }
    }
    
    func deselectCCVList(at section:Int,except row:Int) {
        if let speclist = self.goodsDetailModel?.specList {
            let count = speclist[section].specOptionList.count
            if count > 0 {
                for r in 0..<count {
                    if r != row {
                        self.ccvSepcList.deselectItem(at: IndexPath(row: r, section: section), animated: false)
                    }
                }
            }
        }
    }
}

extension ZXGoodsSpecViewController: UIViewControllerTransitioningDelegate {
    func presentationController(forPresented presented: UIViewController, presenting: UIViewController?, source: UIViewController) -> UIPresentationController? {
        return ZXDimmingPresentationController.init(presentedViewController: presented, presenting: presenting)
    }
}
