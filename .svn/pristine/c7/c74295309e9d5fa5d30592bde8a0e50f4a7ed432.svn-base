//
//  ZXShoppingCart+Control.swift
//  rbstore
//
//  Created by screson on 2017/8/1.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

extension ZXShoppingCartViewController: ZXCartControlProtocol {
    func zxCartChangeSpec(for cell: UIView) {
        let specSelect = ZXGoodsSpecViewController()
        specSelect.type = .changeSpec
        self.present(specSelect, animated: true, completion: nil)
    }
    
    func zxCartChecked(_ check: Bool, cell: UIView) {
        if let cell = cell as? ZXCartTableViewCell,let indexPath = self.tblOrderList.indexPath(for: cell) {
            let m = self.cartList[indexPath.section]
            ZXCommonUtils.showNetworkActivityIndicator(true)
            ZXCartViewModel.updateSelect(cartIds: [m.id], select: !m.zx_isChosen, completion: { (c, s, errorMsg) in
                ZXCommonUtils.showNetworkActivityIndicator(false)
                if s {
                    m.isChosen = m.zx_isChosen ? 0 : 1
                    self.tblOrderList.reloadSections(IndexSet([indexPath.section]), with: .none)
                    self.updateUIAction(needUpdateTable: false)
                } else {
                    ZXNetwork.errorCodeParse(c, httpError: {
                        ZXHUD.showFailure(in: self.view, text: ZX_NETWORK_ERROR, delay: ZXConst.zxdelayTime)
                    }, serverError: {
                        ZXHUD.showFailure(in: self.view, text: errorMsg, delay: ZXConst.zxdelayTime)
                    })
                }
            })
        }
    }
    
    // + 1
    func zxCartAddOne(for cell: UIView) {
        if let cell = cell as? ZXCartTableViewCell,let indexPath = self.tblOrderList.indexPath(for: cell) {
            let m = self.cartList[indexPath.section]
            if m.num < m.stock {
                ZXHUD.showLoading(in: self.view, text: "", delay: nil)
                ZXCartViewModel.updateSpec_Num(cartId: m.id, productId: m.productId, specProductId: m.specProductId, num: 1, completion: { (c, s, errorMsg) in
                    ZXHUD.hide(for: self.view, animated: true)
                    if s {
                        m.num += 1
                        self.tblOrderList.reloadSections(IndexSet([indexPath.section]), with: .none)
                        self.updateUIAction(needUpdateTable: false)
                    } else {
                        ZXNetwork.errorCodeParse(c, httpError: {
                            ZXHUD.showFailure(in: self.view, text: ZX_NETWORK_ERROR, delay: ZXConst.zxdelayTime)
                        }, serverError: {
                            ZXHUD.showFailure(in: self.view, text: errorMsg, delay: ZXConst.zxdelayTime)
                        })
                    }
                })
            } else {
                ZXHUD.showFailure(in: self.view, text: "已是最大库存", delay: ZXConst.zxdelayTime)
            }
        }
    }
    // - 1
    func zxCartSubOne(for cell: UIView) {
        if let cell = cell as? ZXCartTableViewCell,let indexPath = self.tblOrderList.indexPath(for: cell) {
            let m = self.cartList[indexPath.section]
            if m.num > 1 {
                ZXHUD.showLoading(in: self.view, text: "", delay: nil)
                ZXCartViewModel.updateSpec_Num(cartId: m.id, productId: m.productId, specProductId: m.specProductId, num: -1, completion: { (c, s, errorMsg) in
                    ZXHUD.hide(for: self.view, animated: true)
                    if s {
                        m.num -= 1
                        self.tblOrderList.reloadSections(IndexSet([indexPath.section]), with: .none)
                        self.updateUIAction(needUpdateTable: false)
                    } else {
                        ZXNetwork.errorCodeParse(c, httpError: {
                            ZXHUD.showFailure(in: self.view, text: ZX_NETWORK_ERROR, delay: ZXConst.zxdelayTime)
                        }, serverError: {
                            ZXHUD.showFailure(in: self.view, text: errorMsg, delay: ZXConst.zxdelayTime)
                        })
                    }
                })
            }
        }
    }
}
