//
//  RBSearchRootViewController+CLV.swift
//  rbstore
//
//  Created by 120v on 2017/7/28.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

extension RBSearchRootViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print(indexPath.row)
        self.searchField.resignFirstResponder()
        
        let categoryVC: RBCategoryListViewController = RBCategoryListViewController.init()
        categoryVC.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(categoryVC, animated: true)

        
    }
}

extension RBSearchRootViewController : UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell: RBSearchRootCell = collectionView.dequeueReusableCell(withReuseIdentifier: RBSearchRootCell.RBSearchRootCellID, for: indexPath) as! RBSearchRootCell
        switch indexPath.section {
        case 0:
            if self.historyArray.count != 0 {//热门
                cell.loadData(self.historyArray.object(at: indexPath.row) as! String)
            }
        case 1:
            if self.hotArray.count != 0 {//历史
                cell.loadData(self.hotArray.object(at: indexPath.row) as! String)
            }
        default:
            break
        }
        return cell
    }
    
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        var cellNum: NSInteger = 0
        switch section {
        case 0:
            cellNum = self.historyArray.count
        case 1:
            cellNum = self.hotArray.count
        default:
            break
        }
        return cellNum
    }
}

extension RBSearchRootViewController: UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        var size: CGSize = CGSize.zero
        switch section {
        case 0:
            size = CGSize.init(width: ZXBOUNDS_WIDTH, height: 35)
        case 1:
            size = CGSize.init(width: ZXBOUNDS_WIDTH, height: 30)
        default:
            break
        }
        return size
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        
        if kind == UICollectionElementKindSectionHeader {
            switch indexPath.section {
            case 0:
                let headerCell: RBSearchHeader = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: RBSearchHeader.RBSearchHeaderID, for: indexPath) as! RBSearchHeader
                headerCell.delegate = self
                return headerCell
            case 1:
                let headerCell: RBSearchHeader2 = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: RBSearchHeader2.RBSearchHeader2ID, for: indexPath) as! RBSearchHeader2
                return headerCell
            default:
                break
            }
        }
        return UICollectionReusableView.init()
    }
}

extension RBSearchRootViewController: RBSearchHeaderDelegate {
    func didDeletedButtonAction(_ sender: UIButton) {
        
        ZXAlertUtils.showAlert(wihtTitle: "", message: "确定清空历史搜索吗？", buttonTexts: ["取消","确定"]) { (index) in
            switch index {
            case 0:
                return
            case 1://清空历史记录
                self.historyArray.removeAllObjects()
                self.collectionView.reloadData()
            default:
                break
            }
        }
        print("删除历史记录")
    }
}

extension RBSearchRootViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
//        self.view.endEditing(true)
        self.searchField.resignFirstResponder()
    }
}
