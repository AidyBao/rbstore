//
//  ZXHorizontalTableCell.swift
//  rbstore
//
//  Created by screson on 2017/7/24.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

enum ZXHCellType {
    case name
    case nameWithPrice
    case white
}


/// 商品水平排列Cell
class ZXHorizontalTableCell: UITableViewCell {
    static let width = (ZXBOUNDS_WIDTH - 8 * 2 - 5 * 3) / 4
    static let height = ZXHorizontalTableCell.width + 42
    var type:ZXHCellType = .name
    @IBOutlet weak var ccvList: UICollectionView!
    override func awakeFromNib() {
        super.awakeFromNib()
        // Initialization code
        self.backgroundColor = UIColor.clear
        self.contentView.backgroundColor = UIColor.clear
        self.ccvList.backgroundColor = UIColor.clear
        
        self.ccvList.contentInset = UIEdgeInsetsMake(0, 8, 0, 8)
        self.ccvList.register(UINib(nibName: ZXGoodsWithNameCCVCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXGoodsWithNameCCVCell.reuseIdentifier)
        self.ccvList.register(UINib(nibName: ZXGoodsWithPriceCCVCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXGoodsWithPriceCCVCell.reuseIdentifier)
        self.ccvList.register(UINib(nibName: ZXSeeMoreCCVCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXSeeMoreCCVCell.reuseIdentifier)
        self.ccvList.delegate = self
        self.ccvList.dataSource = self
        
    }

    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }
    
    func reloadType(_ type:ZXHCellType) {
        self.type = type
        self.ccvList.reloadData()
    }
    
}

extension ZXHorizontalTableCell: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if indexPath.row == 4 {//查看更多
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ZXSeeMoreCCVCell.reuseIdentifier, for: indexPath) as! ZXSeeMoreCCVCell
            return cell
        } else {
            switch type {
                case .nameWithPrice,.white:
                    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ZXGoodsWithPriceCCVCell.reuseIdentifier, for: indexPath) as! ZXGoodsWithPriceCCVCell
                    if self.type == .white {
                        cell.contentView.backgroundColor = UIColor.white
                    } else {
                        cell.contentView.backgroundColor = UIColor.zx_subTintColor
                    }
                    return cell
                default:
                    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ZXGoodsWithNameCCVCell.reuseIdentifier, for: indexPath) as! ZXGoodsWithNameCCVCell
                    return cell
            }
        }

    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if self.type == .white {
            return 4
        }
        return 5
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
}

extension ZXHorizontalTableCell: UICollectionViewDelegate,UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.row == 4 {
            ZXRouter.showDetail(type: .categoryList, model: nil)
        } else {
            ZXRouter.showDetail(type: .goodsDetail, model: nil)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if indexPath.row == 4 {
            return CGSize(width: 30, height: ZXHorizontalTableCell.height)
        }
        return CGSize(width: ZXHorizontalTableCell.width, height: ZXHorizontalTableCell.height)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
}

extension ZXHorizontalTableCell: UIScrollViewDelegate {
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if self.type != .white {
            let contentWidth = scrollView.contentSize.width
            let offsetx = scrollView.contentOffset.x + ZXBOUNDS_WIDTH
            if contentWidth - offsetx <= -30 {
                let list = ZXActivityViewController()
                ZXRootController.selectedNav().pushViewController(list, animated: true)
            }
        }
    }
}
