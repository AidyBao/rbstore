//
//  RBSearchRootViewController+CLV.swift
//  rbstore
//
//  Created by 120v on 2017/7/28.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

extension RBSearchRootViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print(indexPath.row)
        self.searchField.resignFirstResponder()
    }
}

extension RBSearchRootViewController : UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell: RBSearchRootCell = collectionView.dequeueReusableCell(withReuseIdentifier: RBSearchRootCell.RBSearchRootCellID, for: indexPath) as! RBSearchRootCell
        return cell
    }
    
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 100
    }
    
    
}

extension RBSearchRootViewController: UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        var size: CGSize = CGSize.zero
        switch section {
        case 0:
            size = CGSize.init(width: ZXBOUNDS_WIDTH, height: 35)
        case 1:
            size = CGSize.init(width: ZXBOUNDS_WIDTH, height: 30)
        default:
            break
        }
        return size
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        
        switch indexPath.section {
        case 0:
            let headerCell: RBSearchHeader = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: RBSearchHeader.RBSearchHeaderID, for: indexPath) as! RBSearchHeader
            headerCell.delegate = self
            return headerCell
        case 1:
            let headerCell: RBSearchHeader2 = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: RBSearchHeader2.RBSearchHeader2ID, for: indexPath) as! RBSearchHeader2
            return headerCell
        default:
            break
        }
        
        return UICollectionReusableView.init()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        return CGSize.zero
    }
}

extension RBSearchRootViewController: RBSearchHeaderDelegate {
    func didDeletedButtonAction(_ sender: UIButton) {
        
        ZXAlertUtils.showAlert(wihtTitle: "", message: "确定清空历史搜索吗？", buttonTexts: ["取消,确定"]) { (index) in
            switch index {
            case 0:
                return
            case 1://清空历史记录
                break
            default:
                break
            }
        }
        print("删除历史记录")
    }
}

extension RBSearchRootViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        self.view.endEditing(true)
        self.searchField.resignFirstResponder()
    }
}
