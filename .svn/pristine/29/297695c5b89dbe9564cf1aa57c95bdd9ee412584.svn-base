//
//  ZXLRTableViewCell.swift
//  rbstore
//
//  Created by screson on 2017/7/26.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

enum ZXLineType {
    case top
    case bottom
    case both
    case none
}

class ZXLRTableViewCell: UITableViewCell {

    @IBOutlet weak var rightArrow: UIImageView!
    @IBOutlet weak var rightConstraintOffset: NSLayoutConstraint!
    @IBOutlet weak var lbLeftText: ZXUILabel!
    @IBOutlet weak var lbRightText: ZXUILabel!
    
    @IBOutlet weak var lbTopLine: UIImageView!
    
    @IBOutlet weak var lbBottomLine: UIImageView!
    fileprivate let cornerLayer = CAShapeLayer()
    fileprivate var cornerType:ZXCornerType = ZXCornerType.none
    
    override func awakeFromNib() {
        super.awakeFromNib()
        // Initialization code
        self.selectionStyle = .none
        self.lbRightText.textColor = UIColor.zx_customAColor
        self.reloadData(cornerType: .none, lineType: .none, showArrow: false)
    }

    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }
    
    func reloadData(cornerType:ZXCornerType,lineType:ZXLineType,showArrow:Bool = false) {
        self.cornerType = cornerType
        self.layoutIfNeeded()
        self.lbBottomLine.isHidden = true
        self.lbTopLine.isHidden = true
        switch lineType {
            case .top:
                self.lbTopLine.isHidden = false
            case .bottom:
                self.lbBottomLine.isHidden = false
            case .both:
                self.lbBottomLine.isHidden = false
                self.lbTopLine.isHidden = false
            default:
                break
        }
        if showArrow {
            self.rightArrow.isHidden = false
            self.rightConstraintOffset.constant = 30
        } else {
            self.rightArrow.isHidden = true
            self.rightConstraintOffset.constant = 17
        }
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        self.updateCorner()
    }
    
    func updateCorner() {
        var path:UIBezierPath?
        switch self.cornerType {
            case .top:
                path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: self.frame.size.width, height: self.frame.size.height), byRoundingCorners: [.topLeft,.topRight], cornerRadii: CGSize(width: 5, height: 5))
            case .bottom:
                path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: self.frame.size.width, height: self.frame.size.height), byRoundingCorners: [.bottomLeft,.bottomRight], cornerRadii: CGSize(width: 5, height: 5))
            case .all:
                path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: self.frame.size.width, height: self.frame.size.height), byRoundingCorners: .allCorners, cornerRadii: CGSize(width: 5, height: 5))
            default:
                break
        }
        if let path = path {
            cornerLayer.path = path.cgPath
            self.layer.mask = cornerLayer
        } else {
            self.layer.mask = nil
        }
    }
}
