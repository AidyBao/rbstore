//
//  RBMyCollectViewController.swift
//  rbstore
//
//  Created by 120v on 2017/7/24.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

class RBMyCollectViewController: ZXUIViewController {
    
    
    @IBOutlet weak var tableView: UITableView!
    var currentIndex:NSInteger = 0
    var totalPageNum:NSInteger = 0

    override func viewDidLoad() {
        super.viewDidLoad()

        self.navigationItem.title = "我的收藏"
        
        self.tableView.register(UINib.init(nibName:String.init(describing: RBCollectCell.self), bundle: nil), forCellReuseIdentifier: RBCollectCell.RBCollectCellID)
        self.setRefresh()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        self.tableView.mj_header.beginRefreshing()
    }
    
    func setRefresh() ->Void{
        self.tableView.zx_addHeaderRefresh(showGif: true, target: self, action: #selector(refreshForHeader))
        self.tableView.zx_addFooterRefresh(autoRefresh: true, target: self, action: #selector(refreshForFooter))
    }
    
    func refreshForHeader() -> Void{
        self.currentIndex = 1
        self.httpRequestForMycollect()
    }
    
    func refreshForFooter() -> Void{
        self.currentIndex += 1
        self.httpRequestForMycollect()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    

    lazy var dataArray: NSMutableArray = {
        let array: NSMutableArray = NSMutableArray.init(capacity: 3)
        return array
    }()

}

//MARK: - Http
extension RBMyCollectViewController {
    func httpRequestForMycollect() ->Void{
        var params:Dictionary<String,Any> = Dictionary.init()
        params["userId"] = ""
        params["drugstoreIds"] = ""
        params["token"] = ""
        
        params["pageNum"] = self.currentIndex
        params["pageSize"] = ZX_PAGE_SIZE
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: 0)
        ZXNetwork.asyncRequest(withUrl: ZXAPI.address(module: ZXAPIConst.Personal.myCollect), params: params.zx_signDic(), method: .post) { (success, status, content, string, error) in
            ZXHUD.hide(for: self.view, animated: true)
            self.tableView.mj_header.endRefreshing()
            self.tableView.mj_footer.endRefreshing()
            ZXEmptyView.hide(from: self.view)
            ZXEmptyView.hide(from: self.tableView)
            if success {
                if status == ZXAPI_SUCCESS{
                    let dict:Dictionary<String,Any> = content["data"] as! Dictionary
                    self.totalPageNum = dict["pageTotal"] as! NSInteger
                    let tempArray:NSMutableArray = NSMutableArray.init(capacity: 5)
                    if let list = dict["listData"] as? Array<Any> {
                        for dict in list{
                            let model:RBMessageModel = RBMessageModel.mj_object(withKeyValues: dict)
                            tempArray.add(model)
                        }
                        
                        if self.currentIndex == 1 {
                            if tempArray.count != 0 {
                                self.dataArray = tempArray.mutableCopy() as! NSMutableArray
                            }else{
                                ZXEmptyView.show(in: self.view, type: .noData, text1: "暂无新消息", text2: "", fixHeight: 0, callBack: nil)
                            }
                        }else{
                            if tempArray.count != 0 {
                                self.dataArray.addObjects(from: tempArray as! [Any])
                            }
                        }
                        
                        if self.currentIndex >= self.totalPageNum {
                            self.tableView.mj_footer.endRefreshingWithNoMoreData()
                        }
                        
                    }else{
                        ZXEmptyView.show(in: self.view, type: .noData, text1: "暂无数据", text2: "", fixHeight: 0, callBack: nil)
                    }
                    self.tableView.reloadData()
                }
            }else if status != ZXAPI_LOGIN_INVALID{
                if self.currentIndex == 1 {
                    ZXEmptyView.show(in: self.view, type: .networkError, text1: nil, text2: nil, fixHeight: 0, callBack: {
                        ZXEmptyView.hide(from: self.view)
                        self.httpRequestForMycollect()
                    })
                }else{
                    ZXHUD.showLoading(in: self.view, text: (error?.errorMessage)!, delay: 1.5)
                }
            }
        }
    }
}
